#[macro_use]
extern crate nom;

// data link level parsers
pub mod ethernet;

// internet level parsers
pub mod ipv4;
pub mod ipv6;

// transport level parsers
pub mod tcp;
pub mod udp;

// application level parsers
pub mod dns;
// pub mod smtp;

#[derive(Clone, Debug)]
pub enum IpPacket<'a> {
    V4(ipv4::Ipv4Packet<'a>),
    V6(ipv6::Ipv6Packet<'a>),
}

pub fn parse_ip_packet<'a>(bs: &'a [u8]) -> Result<IpPacket<'a>, nom::IError> {
    alt!(
        bs,
        map!(ipv4::parse_ipv4_packet, |p| IpPacket::V4(p)) | 
        map!(ipv6::parse_ipv6_packet, |p| IpPacket::V6(p))
    ).to_full_result()
}



#[derive(Clone, Debug)]
pub enum TransportLayerPacket<'a> {
    Tcp(tcp::TcpPacket<'a>),
    Udp(udp::UdpPacket<'a>),
}

impl <'a> IpPacket<'a> {
    pub fn parse_inner(&self) -> Option<TransportLayerPacket<'a>> {
        match self {
            &IpPacket::V4(ref ip4) => Some((ip4.header.proto, ip4.body)),
            &IpPacket::V6(ref ip6) => {
                let proto = if ip6.extensions.len() == 0 {
                    ip6.header.next_header
                } else {
                    ip6.extensions.last().unwrap().next_header
                };
                match proto {
                    ipv6::Ipv6HeaderType::Ipv4(ref proto) => Some((*proto, ip6.body)),
                    _ => None,
                }
            }
        }
        .and_then(|(proto, body)| {
            match proto {
                ipv4::Ipv4Protocol::Tcp => tcp::parse_tcp_packet(body)
                    .to_full_result().ok().map(TransportLayerPacket::Tcp),
                ipv4::Ipv4Protocol::Udp => udp::parse_udp_packet(body)
                    .to_full_result().ok().map(TransportLayerPacket::Udp),
                _ => None,
            }
        })
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_stmp_packet() {
        let packet = [
            0x00, 0x1f, 0x29, 0x5e, 0x4d, 0x26, 0x00, 0x50,
            0x56, 0xbb, 0x3a, 0xa0, 0x08, 0x00, 0x45, 0x10,
            0x00, 0x3c, 0x83, 0x1b, 0x40, 0x00, 0x40, 0x06,
            0x15, 0x0a, 0xc0, 0xa8, 0x14, 0x46, 0x4a, 0x7d,
            0x83, 0x1b, 0xd5, 0x1d, 0x00, 0x19, 0x6b, 0x7f,
            0xc7, 0x2d, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x02,
            0x72, 0x10, 0xa2, 0xb5, 0x00, 0x00, 0x02, 0x04,
            0x05, 0xb4, 0x04, 0x02, 0x08, 0x0a, 0x0a, 0x99,
            0x44, 0x36, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03,
            0x03, 0x07,
        ];

        // TODO check more fields
        let (left, eth_packet) = ethernet::parse_eth2_packet(&packet).unwrap();
        println!("{:?}", &eth_packet);
        assert_eq!(left.len(), 0);
        let (left, ipv4_packet) = ipv4::parse_ipv4_packet(eth_packet.body).unwrap();
        println!("{:?}", &ipv4_packet);
        assert_eq!(left.len(), 0);
        let (left, tcp_packet) = tcp::parse_tcp_packet(ipv4_packet.body).unwrap();
        println!("{:?}", &tcp_packet);
        assert_eq!(left.len(), 0);
    }

    #[test]
    fn test_stmp_packet2() {
        let packet = [
            0x00, 0x50, 0x56, 0xbb, 0x3a, 0xa0, 0x00, 0x1f,
            0x29, 0x5e, 0x4d, 0x26, 0x08, 0x00,

            0x45, 0x00, 0x00, 0xdb, 0x51, 0x4e, 0x00, 0x00,
            0x31, 0x06, 0x95, 0x48, 0x4a, 0x7d, 0x83, 0x1b,
            0xc0, 0xa8, 0x14, 0x46, 0x00, 0x19, 0xd5, 0x1d,
            0x99, 0x56, 0xad, 0xb4, 0x6b, 0x7f, 0xc7, 0x34,
            0x80, 0x18, 0x01, 0x4d, 0x72, 0xc6, 0x00, 0x00,
            0x01, 0x01, 0x08, 0x0a, 0x03, 0xa5, 0x97, 0x31,
            0x0a, 0x99, 0x47, 0xe7, 0x32, 0x35, 0x30, 0x2d,
            0x6d, 0x78, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
            0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x20, 0x61, 0x74,
            0x20, 0x79, 0x6f, 0x75, 0x72, 0x20, 0x73, 0x65,
            0x72, 0x76, 0x69, 0x63, 0x65, 0x2c, 0x20, 0x5b,
            0x31, 0x30, 0x38, 0x2e, 0x33, 0x39, 0x2e, 0x38,
            0x31, 0x2e, 0x35, 0x31, 0x5d, 0x0d, 0x0a, 0x32,
            0x35, 0x30, 0x2d, 0x53, 0x49, 0x5a, 0x45, 0x20,
            0x33, 0x35, 0x38, 0x38, 0x32, 0x35, 0x37, 0x37,
            0x0d, 0x0a, 0x32, 0x35, 0x30, 0x2d, 0x38, 0x42,
            0x49, 0x54, 0x4d, 0x49, 0x4d, 0x45, 0x0d, 0x0a,
            0x32, 0x35, 0x30, 0x2d, 0x53, 0x54, 0x41, 0x52,
            0x54, 0x54, 0x4c, 0x53, 0x0d, 0x0a, 0x32, 0x35,
            0x30, 0x2d, 0x45, 0x4e, 0x48, 0x41, 0x4e, 0x43,
            0x45, 0x44, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53,
            0x43, 0x4f, 0x44, 0x45, 0x53, 0x0d, 0x0a, 0x32,
            0x35, 0x30, 0x2d, 0x50, 0x49, 0x50, 0x45, 0x4c,
            0x49, 0x4e, 0x49, 0x4e, 0x47, 0x0d, 0x0a, 0x32,
            0x35, 0x30, 0x2d, 0x43, 0x48, 0x55, 0x4e, 0x4b,
            0x49, 0x4e, 0x47, 0x0d, 0x0a, 0x32, 0x35, 0x30,
            0x20, 0x53, 0x4d, 0x54, 0x50, 0x55, 0x54, 0x46,
            0x38, 0x0d, 0x0a
        ];

        let (left, eth_packet) = ethernet::parse_eth2_packet(&packet).unwrap();
        println!("{:?}", &eth_packet);
        assert_eq!(left.len(), 0);
        let (left, ipv4_packet) = ipv4::parse_ipv4_packet(eth_packet.body).unwrap();
        println!("{:?}", &ipv4_packet);
        assert_eq!(left.len(), 0);
        let (left, tcp_packet) = tcp::parse_tcp_packet(ipv4_packet.body).unwrap();
        println!("{:?}", &tcp_packet);
        assert_eq!(left.len(), 0);
    }

    #[test]
    fn test_ip6_udp_packet() {
        let packet = [
            0x60, 0x00,
            0x00, 0x00, 0x01, 0x30, 0x11, 0xe6, 0x3f, 0xfe, 0x05, 0x01, 0x48, 0x19, 0x00, 0x00, 0x00, 0x00,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x42, 0x3f, 0xfe, 0x05, 0x07, 0x00, 0x00, 0x00, 0x01, 0x02, 0x00,
            0x86, 0xff, 0xfe, 0x05, 0x80, 0xda, 0x00, 0x35, 0x09, 0x5d, 0x01, 0x30, 0xab, 0xa0, 0x00, 0x06,
            0x81, 0x80, 0x00, 0x01, 0x00, 0x01, 0x00, 0x04, 0x00, 0x05, 0x03, 0x77, 0x77, 0x77, 0x05, 0x79,
            0x61, 0x68, 0x6f, 0x6f, 0x03, 0x63, 0x6f, 0x6d, 0x00, 0x00, 0x0f, 0x00, 0x01, 0xc0, 0x0c, 0x00,
            0x0f, 0x00, 0x01, 0x00, 0x00, 0x03, 0x1c, 0x00, 0x11, 0x00, 0x00, 0x03, 0x6d, 0x72, 0x31, 0x05,
            0x79, 0x61, 0x68, 0x6f, 0x6f, 0x03, 0x63, 0x6f, 0x6d, 0x00, 0xc0, 0x10, 0x00, 0x02, 0x00, 0x01,
            0x00, 0x02, 0xa2, 0x98, 0x00, 0x0f, 0x03, 0x6e, 0x73, 0x31, 0x05, 0x79, 0x61, 0x68, 0x6f, 0x6f,
            0x03, 0x63, 0x6f, 0x6d, 0x00, 0xc0, 0x10, 0x00, 0x02, 0x00, 0x01, 0x00, 0x02, 0xa2, 0x98, 0x00,
            0x13, 0x03, 0x6e, 0x73, 0x32, 0x03, 0x64, 0x63, 0x61, 0x05, 0x79, 0x61, 0x68, 0x6f, 0x6f, 0x03,
            0x63, 0x6f, 0x6d, 0x00, 0xc0, 0x10, 0x00, 0x02, 0x00, 0x01, 0x00, 0x02, 0xa2, 0x98, 0x00, 0x15,
            0x02, 0x6e, 0x73, 0x06, 0x65, 0x75, 0x72, 0x6f, 0x70, 0x65, 0x05, 0x79, 0x61, 0x68, 0x6f, 0x6f,
            0x03, 0x63, 0x6f, 0x6d, 0x00, 0xc0, 0x10, 0x00, 0x02, 0x00, 0x01, 0x00, 0x02, 0xa2, 0x98, 0x00,
            0x13, 0x03, 0x6e, 0x73, 0x35, 0x03, 0x64, 0x63, 0x78, 0x05, 0x79, 0x61, 0x68, 0x6f, 0x6f, 0x03,
            0x63, 0x6f, 0x6d, 0x00, 0x03, 0x6d, 0x72, 0x31, 0xc0, 0x10, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00,
            0x03, 0x1c, 0x00, 0x04, 0xce, 0xfb, 0x11, 0x4d, 0x03, 0x6e, 0x73, 0x35, 0x03, 0x64, 0x63, 0x78,
            0xc0, 0x10, 0x00, 0x01, 0x00, 0x01, 0x00, 0x02, 0xa2, 0x97, 0x00, 0x04, 0xd8, 0x20, 0x4a, 0x0a,
            0x02, 0x6e, 0x73, 0x06, 0x65, 0x75, 0x72, 0x6f, 0x70, 0x65, 0xc0, 0x10, 0x00, 0x01, 0x00, 0x01,
            0x00, 0x02, 0xa2, 0x97, 0x00, 0x04, 0xc3, 0x43, 0x31, 0x19, 0x03, 0x6e, 0x73, 0x32, 0x03, 0x64,
            0x63, 0x61, 0xc0, 0x10, 0x00, 0x01, 0x00, 0x01, 0x00, 0x02, 0xa2, 0x97, 0x00, 0x04, 0xd1, 0x8f,
            0xc8, 0x22, 0x03, 0x6e, 0x73, 0x31, 0xc0, 0x10, 0x00, 0x01, 0x00, 0x01, 0x00, 0x02, 0xa2, 0x97,
            0x00, 0x04, 0xcc, 0x47, 0xc8, 0x21,
        ];

        let (left, ip_packet) = ipv6::parse_ipv6_packet(&packet).unwrap();
        println!("{:?}", &ip_packet);
        assert_eq!(left.len(), 0);
        let (left, udp_packet) = udp::parse_udp_packet(&ip_packet.body).unwrap();
        println!("{:?}", &udp_packet);
        assert_eq!(left.len(), 0);
        assert_eq!(udp_packet.header.src,53);
        assert_eq!(udp_packet.header.dst, 2397);
        assert_eq!(udp_packet.header.len, 304);
    }
}
