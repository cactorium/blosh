#[macro_use]
extern crate nom;

// data link level parsers
pub mod ethernet;

// internet level parsers
pub mod ipv4;
// pub mod ipv6;

// transport level parsers
pub mod tcp;
pub mod udp;

// application level parsers
pub mod dns;
// pub mod smtp;

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn it_works() {
    }

    #[test]
    fn test_stmp_packet() {
        let packet = [
            0x00, 0x1f, 0x29, 0x5e, 0x4d, 0x26, 0x00, 0x50,
            0x56, 0xbb, 0x3a, 0xa0, 0x08, 0x00, 0x45, 0x10,
            0x00, 0x3c, 0x83, 0x1b, 0x40, 0x00, 0x40, 0x06,
            0x15, 0x0a, 0xc0, 0xa8, 0x14, 0x46, 0x4a, 0x7d,
            0x83, 0x1b, 0xd5, 0x1d, 0x00, 0x19, 0x6b, 0x7f,
            0xc7, 0x2d, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x02,
            0x72, 0x10, 0xa2, 0xb5, 0x00, 0x00, 0x02, 0x04,
            0x05, 0xb4, 0x04, 0x02, 0x08, 0x0a, 0x0a, 0x99,
            0x44, 0x36, 0x00, 0x00, 0x00, 0x00, 0x01, 0x03,
            0x03, 0x07,
        ];

        let (left, eth_packet) = ethernet::parse_eth2_packet(&packet).unwrap();
        println!("{:?}", &eth_packet);
        assert_eq!(left.len(), 0);
        let (left, ipv4_packet) = ipv4::parse_ipv4_packet(eth_packet.body).unwrap();
        println!("{:?}", &ipv4_packet);
        assert_eq!(left.len(), 0);
        let (left, tcp_packet) = tcp::parse_tcp_packet(ipv4_packet.body).unwrap();
        println!("{:?}", &tcp_packet);
        assert_eq!(left.len(), 0);
        assert!(false);
    }
}
